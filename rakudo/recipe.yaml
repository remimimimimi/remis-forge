context:
  name: "rakudo"
  version: "2025.06"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/${{ name }}/${{ name }}/releases/download/${{ version }}/${{ name }}-${{ version }}.tar.gz
  sha256: 202164a266f43091fde1f8cb22fdc45d9cfa03e9961aee708ba92b6d29087a72

build:
  number: 1
  # Important: do NOT let rattler rewrite .moarvm bytecode
  prefix_detection:
    ignore:
      - share/perl6/**/*.moarvm
      - share/nqp/**/*.moarvm
  # (optional but nice) always copy bytecode rather than link from cache
  always_copy_files:
    - share/perl6/**/*.moarvm
    - share/nqp/**/*.moarvm

  script: |
    set -euxo pipefail

    # Use the NQP and MoarVM from the host env explicitly
    perl Configure.pl \
      --backends=moar \
      --prefix="$PREFIX" \
      --with-nqp="$(which nqp)"
    make -j${CPU_COUNT}
    make install

    # Rakudo installs under share/perl6 (historical name)
    if [ -d "$PREFIX/share/perl6/runtime" ]; then
      RAKU_HOME="$PREFIX/share/perl6"
    else
      echo "ERROR: could not find \$PREFIX/share/perl6/runtime"
      find "$PREFIX/share" -maxdepth 3 -type d -name runtime -print || true
      exit 1
    fi

    # Sanity: CLI bytecode must exist
    test -f "$RAKU_HOME/runtime/rakudo.moarvm" || {
      echo "ERROR: rakudo.moarvm missing at $RAKU_HOME/runtime/rakudo.moarvm"; exit 1; }

    # Keep upstream ELF launchers for debugging if present
    if [ -e "$PREFIX/bin/rakudo" ] && file "$PREFIX/bin/rakudo" | grep -q ELF; then
      mv "$PREFIX/bin/rakudo" "$PREFIX/bin/rakudo-upstream"
    fi
    if [ -e "$PREFIX/bin/raku" ] && file "$PREFIX/bin/raku" | grep -q ELF; then
      mv "$PREFIX/bin/raku" "$PREFIX/bin/raku-upstream"
    fi

    # Remove any leftover symlinks to avoid cycles
    [ -L "$PREFIX/bin/raku" ] && rm -f "$PREFIX/bin/raku"
    [ -L "$PREFIX/bin/rakudo" ] && rm -f "$PREFIX/bin/rakudo"

    # Robust wrapper (reloc-safe) â€” include Rakudo + NQP lib paths
    cat > "$PREFIX/bin/raku" <<'EOF'
    #!/usr/bin/env bash
    set -euo pipefail
    if [ -n "${PREFIX:-}" ]; then
      _PFX="$PREFIX"
    else
      _PFX="$(cd "$(dirname "$0")/.."; pwd)"
    fi
    # Where rakudo installs its runtime tree
    if [ -d "${_PFX}/share/perl6/runtime" ]; then
      export RAKUDO_HOME="${_PFX}/share/perl6"
    else
      export RAKUDO_HOME="${_PFX}/share/rakudo"
    fi
    # NQP runtime (needed on libpath)
    NQP_HOME="${NQP_HOME:-${_PFX}/share/nqp}"
    MOAR="${MOAR:-moar}"
    exec "$MOAR" \
      --libpath="${NQP_HOME}/lib" \
      --libpath="${RAKUDO_HOME}/lib" \
      --libpath="${RAKUDO_HOME}/runtime" \
      "${RAKUDO_HOME}/runtime/rakudo.moarvm" "$@"
    EOF
    chmod +x "$PREFIX/bin/raku"
    ln -sf raku "$PREFIX/bin/rakudo"

requirements:
  build:
    - ${{ compiler("c") }}
    - if: win
      then: perl
  host:
    - moarvm
    - nqp

  run_exports:
    - ${{ pin_subpackage("rakudo", exact=True) }}

# Not reproducible, complains that it cannot find executable. Compiles
# only when environment is manually loaded.
tests:
  - script:
      - raku -e 'say("Hello from Raku")'
      - out=$(raku -e 'say 40+2'); test "$out" = "42"
      - rakudo-debug --version
      - rakudo-debug-m --version
      - perl6 --version
      - perl6-debug --version
      - perl6-m --version
      - perl6-debug-m --version
      - rakudo-m --version
      - raku --version
      - rakudo --version
    requirements:
      run:
        - addr2line-rust
